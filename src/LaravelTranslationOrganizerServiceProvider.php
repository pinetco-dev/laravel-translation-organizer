<?php

namespace Pinetcodev\LaravelTranslationOrganizer;

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Support\Facades\Route;
use Pinetcodev\LaravelTranslationOrganizer\Commands\CacheClearCommand;
use Pinetcodev\LaravelTranslationOrganizer\Commands\ExportCommand;
use Pinetcodev\LaravelTranslationOrganizer\Commands\FindCommand;
use Pinetcodev\LaravelTranslationOrganizer\Commands\ImportCommand;
use Pinetcodev\LaravelTranslationOrganizer\Commands\PublishCommand;
/*use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\Modals\CreateSourceKey;
use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\Modals\CreateTranslation;
use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\PhraseForm;
use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\SourcePhrase;
use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\TranslationsList;
use Pinetcodev\LaravelTranslationOrganizer\Http\Livewire\Widgets\ExportTranslations;*/
use Pinetcodev\LaravelTranslationOrganizer\Middleware\InjectTranslationOrganizer;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class LaravelTranslationOrganizerServiceProvider extends PackageServiceProvider
{
    public function configurePackage(Package $package): void
    {
        /*
         * This class is a Package Service Provider
         *
         * More info: https://github.com/spatie/laravel-package-tools
         */

        $package
            ->name('laravel-translation-organizer')
            ->hasConfigFile()
            ->hasViews()
            ->hasAssets()
            ->hasMigration('create_translation_organizer_table')
            ->hasCommands([
                ImportCommand::class,
                PublishCommand::class,
                ExportCommand::class,
                CacheClearCommand::class,
                FindCommand::class,
            ]);
    }

    public function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        if (config('translation-organizer.enabled')) {
            $this->app[Kernel::class]
                ->pushMiddleware(InjectTranslationOrganizer::class);
            $this->app[Kernel::class]
                ->appendMiddlewareToGroup('web',InjectTranslationOrganizer::class);
            $this->registerLivewireComponents();
            $this->registerRoutes();
        }
    }

    protected function registerLivewireComponents()
    {
        /*   Livewire::component('translations-ui::phrase-form', PhraseForm::class);
           Livewire::component('translations-ui::source-phrase', SourcePhrase::class);
           Livewire::component('translations-ui::translations-list', TranslationsList::class);
           Livewire::component('translations-ui::export-translations', ExportTranslations::class);
           Livewire::component('translations-ui::create-source-key-modal', CreateSourceKey::class);
           Livewire::component('translations-ui::create-translation-modal', CreateTranslation::class);*/
    }

    protected function registerRoutes()
    {
        Route::group([
            'prefix' => config('translation-organizer.path'),
            'namespace' => 'Pinetcodev\LaravelTranslationOrganizer\Http\Controllers',
            'middleware' => config('translation-organizer.middleware', 'web'),
        ], function () {
            $this->loadRoutesFrom(__DIR__.'/../routes/web.php');
        });
    }
}
